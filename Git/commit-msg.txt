#!/bin/bash
# 
# BetterCollective git commit message standard.
# 
# Inspired by the following Git commit message standards:
# https://wiki.openstack.org/wiki/GitCommitMessages 
#

COMMIT_MSG_ERROR_FOUND=0
MSG="$1"
ERROR_TEXT="\n"

#
# Check for maximum line length
#
checkForLineLength() {
	if egrep -q '^[^#].{80}' "$MSG"; then
		COMMIT_MSG_ERROR_FOUND=1
		ERROR_TEXT="${ERROR_TEXT} - The maximum line length of 80 characters is exceeded.\n"
	fi
}

#
# Check for existence of the commit type text
#
checkForCommitType() {
	if ! egrep -q '^(\[!!!\])?\[(FEATURE|BUGFIX|SECURITY|DOCS|TASK)\] .+$' "$MSG"; then
		COMMIT_MSG_ERROR_FOUND=1
		ERROR_TEXT="${ERROR_TEXT} - 
			Possible markers:\n
			[!!!] Optional, marks a breaking change\n
			\n
			<TYPE> Required, shows the type of commit. <TYPE> is one of the following:\n
			[FEATURE]\n
			A new feature is introduced by this change\n
			[BUGFIX]\n
			A bug is fixed by this change\n
			[TASK]\n
			Everything not fitting into one of the above\n
			[DOCS]\n
			A change related to documentation\n
			[SECURITY]\n
			A security related change.\n\n"
	fi
}

#
# Check space and capital character after the marker
#
checkForSpaceAndCapitalCharacterAfterMarker() {
	if ! [[ $(git show --pretty=format:%s --no-patch $COMMIT) =~ ^(\[[A-Z!]{3,}\]){1,3}\ [A-Z] ]]; then	
		COMMIT_MSG_ERROR_FOUND=1
		ERROR_TEXT="${ERROR_TEXT} - The commit message marker should be followed by 1 space and a capital character (A-Z)\n"
	fi
}
 
#
# Check empty line after subject
#
checkEmptyLineAfterSubject() {
	secondLine=$(git show --no-patch $COMMIT | sed -n '6p')
	if [[ $secondLine =~ [^[:space:]] ]]; then
		COMMIT_MSG_ERROR_FOUND=1
                ERROR_TEXT="${ERROR_TEXT} - The second line (after subject) of the commit message must be blank\n"
	fi
}

#
# Check for existence of a "References: " line.
#
checkForReferences() {
	if ! egrep -q '^(References): [A-Z0-9-]+$' "$MSG"; then
		COMMIT_MSG_ERROR_FOUND=1
		ERROR_TEXT="${ERROR_TEXT} - You need at least one 'References: <issue number>' line.\n"
	fi
}

# Execute the validations
checkForLineLength
checkForCommitType
checkForSpaceAndCapitalCharacterAfterMarker
checkEmptyLineAfterSubject
checkForReferences
	
# Abort commit on message format errors
if [ $COMMIT_MSG_ERROR_FOUND -eq 1 ]; then
	echo -e "\n------------------------------------------------------------------"
	echo -e "\n >> You have the following ERRORS in your commit message:"
	echo -e $ERROR_TEXT
	echo -e "------------------------------------------------------------------\n"
fi
